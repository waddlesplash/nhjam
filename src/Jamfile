#
# Jamfile to build Jam (a make(1)-like program)
#
# There are no user-serviceable parts in this file.
#
# Put executables in platform-specific  subdirectory.

if $(VMS) 	{ LOCATE_TARGET ?= [.binvms] ; }
else if $(MAC) 	{ LOCATE_TARGET ?= :bin.mac ; }
else 		{ LOCATE_TARGET ?= bin.$(OSFULL[1]:L) ; }

# Leave generated source in current directory; it would be nice to use
# these lines below to build the source into the platform-specific
# directory, but getting scan.cpp to include the right jambase.h is
# hard: with ""'s, it always gets the bootstrap version; with <>'s,
# it won't find the bootstrap version.

# SEARCH_SOURCE ?= $(LOCATE_TARGET) $(DOT) ;
# LOCATE_SOURCE ?= $(LOCATE_TARGET) ;

#
# We have some different files for UNIX, VMS, and NT.
#

if $(NT) 	{ code = execunix.cpp filent.cpp pathunix.cpp ; }
else if $(MINGW) { code = execunix.cpp filent.cpp pathunix.cpp ; }
else if $(OS2)	{ code = execunix.cpp fileos2.cpp pathunix.cpp ; }
else if $(VMS) 	{ code = execvms.cpp filevms.cpp pathvms.cpp ; }
else if $(MAC)	{ code = execmac.cpp filemac.cpp pathmac.cpp ; }
else 		{ code = execunix.cpp fileunix.cpp pathunix.cpp ; }

# For jam profiling/debugging.

if $(PROFILE)
{
	CCFLAGS += -pg ;
	LINKFLAGS += -pg ;
	LOCATE_TARGET = $(LOCATE_TARGET)/pg ;
}

if $(DEBUG)
{
	CCFLAGS += -g ;
	C++FLAGS += -g ;
	LINKFLAGS += -g ;
	LOCATE_TARGET = $(LOCATE_TARGET)/g ;
}

### LOCAL CHANGE
#
# Include:
# * header caching
# * jamfile caching
# * definition of JAM_TARGETS variable
#
DEFINES += OPT_HEADER_CACHE_EXT ;
DEFINES += OPT_JAMFILE_CACHE_EXT ;
DEFINES += OPT_JAM_TARGETS_VARIABLE_EXT ;
#
### LOCAL CHANGE

### LOCAL CHANGE
#
# Include rule profiling support, if specified in the environment.
#
if $(OPT_RULE_PROFILING_EXT) {
	DEFINES += OPT_RULE_PROFILING_EXT ;
}
#
### LOCAL CHANGE

### LOCAL CHANGE
#
# Include stat cache server under BeOS.
#
if $(OS) = BEOS {
	DEFINES += OPT_STAT_CACHE_SERVER_EXT ;
}
#
### LOCAL CHANGE

# Do we know yacc?

#if $(YACC) 	{ code += jamgram.y ; }
#else
{ code += jamgram.cpp ; }

#
# Build the jamgram.y from the jamgram.yy
# yyacc is a slippery script that makes grammars a little
# easier to read/maintain.
#

if $(YACC) && $(SUFEXE) = ""
{
	GenFile jamgram.y jamgramtab.h : yyacc jamgram.yy ;
}

### LOCAL CHANGE
#
# These files contain locally developed improvements.
#
code += jcache.cpp ;
# code primarily not written locally, but grabbed from the net
code += hcache.cpp ;
#
### LOCAL CHANGE

### LOCAL CHANGE
#
# Include stat cache server under BeOS.
#
if $(OS) = BEOS {
	code += beos_stat_cache.cpp ;
}
#
### LOCAL CHANGE

#
# How to build the compiled in jambase.
#

Main		mkjambase : mkjambase.cpp ;

if $(VMS)
{
	CC = cxx ;
	LINK = cxxlink ;
	CCFLAGS += /define=VMS ;
}

if $(OS) = BEOS {
}

#
# The guts of the Jamfile: how to build Jam
#

Main 		jam : jam.cpp jambase.cpp ;
LinkLibraries 	jam : libjam.a ;
GenFile 	jambase.cpp : mkjambase Jambase ;

if $(OS) = BEOS {
	local haveBone = [ GLOB /boot/develop/headers/be/bone/arpa : inet.h ] ;
	if ! $(haveBone)	{
		LINKLIBS on jam += -lnet ;
	}
	local haveZeta = [ GLOB /boot/beos/system/lib : libzeta.so ] ;
	if $(haveZeta) {
		DEFINES += _ZETA_USING_DEPRECATED_API_=1 ;
	}
}

Library         libjam.a :
		    builtins.cpp command.cpp compile.cpp $(code) expand.cpp
		    glob.cpp hash.cpp headers.cpp lists.cpp make.cpp make1.cpp
		    newstr.cpp option.cpp parse.cpp regexp.cpp rules.cpp scan.cpp
		    search.cpp timestamp.cpp variable.cpp ;


if $(BINDIR) 	{ InstallBin $(BINDIR) : jam ; }

### LOCAL CHANGE
#
# Build stat cache server under BeOS.
#
if $(OS) = BEOS {
	# RC must be defined, if we are to compile the resources.
	if ! $(RC) && ! $(NO_STAT_CACHE_SERVER_RESOURCES) {
		Echo "NOTE: The variable RC is not defined, and therefore the" ;
		Echo "NOTE: built StatCacheServer won't have resources (it will thus" ;
		Echo "NOTE: appear in the Deskbar). If you want to have resources," ;
		Echo "NOTE: define RC as an absolute or relative path referring to" ;
		Echo "NOTE: the rc program, or just the program name, if it lives in" ;
		Echo "NOTE: the PATH." ;
		NO_STAT_CACHE_SERVER_RESOURCES = 1 ;
	}

	rule CompileResources
	{
		SEARCH on $(2) += $(SEARCH_SOURCE) ;
		MakeLocate $(1) : $(LOCATE_TARGET) ;
		Depends $(1) : $(2) ;
		LocalClean clean : $(1) ;
	}

	actions CompileResources
	{
		$(RC) -o "$(1)" "$(2)"
	}

	rule AddResources
	{
		SEARCH on $(2) += $(SEARCH_SOURCE) ;
		Depends $(1) : $(2) ;
	}

	actions AddResources
	{
		xres -o "$(1)" $(2)
	}

	LINK on StatCacheServer = g++ ;
	LINKLIBS on StatCacheServer
		= [ on StatCacheServer return $(LINKLIBS) ] -lbe ;
	Main StatCacheServer : StatCacheServer.cpppp ;
	if ! $(NO_STAT_CACHE_SERVER_RESOURCES) {
		CompileResources StatCacheServer.rsrc : StatCacheServer.rdef ;
		AddResources StatCacheServer : StatCacheServer.rsrc ;
	}
	if $(BINDIR) 	{ InstallBin $(BINDIR) : StatCacheServer ; }
}
#
### LOCAL CHANGE

#
# Distribution making from here on out.
#

ALLSOURCE =
	Build.cppom Build.mpw Jam.html Jambase Jambase.html Jamfile
	Jamfile.html Makefile Porting README RELNOTES builtins.cpp builtins.h
	command.cpp command.h compile.cpp compile.h execcmd.h execmac.cpp
	execunix.cpp execvms.cpp expand.cpp expand.h filemac.cpp filent.cpp
	fileos2.cpp filesys.h fileunix.cpp filevms.cpp glob.cpp hash.cpp hash.h
	headers.cpp headers.h jam.cpp jam.h jambase.cpp jambase.h jamgram.cpp
	jamgram.h jamgram.y jamgram.yy jamgramtab.h lists.cpp lists.h
	make.cpp make.h make1.cpp mkjambase.cpp newstr.cpp newstr.h option.cpp
	option.h parse.cpp parse.h patchlevel.h pathmac.cpp pathsys.h
	pathunix.cpp pathvms.cpp regexp.cpp regexp.h rules.cpp rules.h scan.cpp
	scan.h search.cpp search.h timestamp.cpp timestamp.h variable.cpp
	variable.h yyacc ;

### LOCAL CHANGE
#
ALLSOURCE += LOCAL_DIFFERENCES.txt ;
#
### LOCAL CHANGE

rule Ball
{
	NotFile balls ;
	Depends balls : $(<) ;

	DEPENDS $(<) : $(>) ;

	switch $(<)
	{
	case *.tar : Tar $(<) : $(>) ;
	case *.shar : Shar $(<) : $(>) ;
	case *.zip : Zip $(<) : $(>) ;
	}
}

VERSION = jam-2.5rc1 ;

actions Tar
{
	ln -s . $(VERSION)
	tar cvhf $(<) $(VERSION)/$(>)
	rm $(VERSION)
}

actions Shar
{
	shar $(>) > $(<)
}

actions Zip
{
	zip $(<) $(>)
}

Ball $(VERSION).shar : $(ALLSOURCE) ;
Ball $(VERSION).tar : $(ALLSOURCE) ;
Ball $(VERSION).zip : $(ALLSOURCE) ;
